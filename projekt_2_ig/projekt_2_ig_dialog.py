# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ProjektIG2Dialog
                                 A QGIS plugin
 Wtyczka pozwala obliczyć różnice wysokości pomiędzy punktami oraz pole powierzchni dowolengo poligonu.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-07
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Bartłomiej Cabaj, Igor Dudek
        email                : bartekc@2003@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets, QtCore
from qgis.core import QgsGeometry
from qgis.core import QgsProject
from qgis.core import QgsProject, QgsVectorLayer, QgsField, QgsPointXY, QgsGeometry, QgsFeature
from qgis.PyQt.QtCore import QVariant




# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'projekt_2_ig_dialog_base.ui'))


class ProjektIG2Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(ProjektIG2Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton_dh.clicked.connect(self.calculate_dh)
        self.pushButton_pole.clicked.connect(self.oblicz_pole)
        self.pushButton_clear.clicked.connect(self.czysc)
        # self.mQgsFileWidget.fileChanged.connect(self.wczytywanie_pliku)
        self.pushButton_poligon.clicked.connect(self.poligon)
        self.pushButton_punkty.clicked.connect(self.wstaw_punkty)
        

        
        
    def calculate_dh(self):
        selected_layer = self.mMapLayerComboBox.currentLayer()
        features = selected_layer.selectedFeatures()
        if len(features) != 2:
            self.label_dh_result.setText("Wybierz dokładnie dwa punkty!")

        else:
            h_1 = float(features[0]['wysokosc'])
            h_2 = float(features[1]['wysokosc'])
            nr1 = features[0]['nr_punktu']
            nr2 = features[1]['nr_punktu']
            dh = h_2 - h_1 
            self.label_dh_result.setText(f'{round(dh,3)}m')
            self.label_wyb_pkt.setText(f'Wybrane punkty : {nr2},{nr1} ')

        
    def oblicz_pole(self, state):
        if self.checkBox_m2.isChecked() and (self.checkBox_ary.isChecked() or self.checkBox_ha.isChecked()):
            self.label_pole_result.setText('Wybierz tylko jedną jednostkę.')
        elif self.checkBox_ary.isChecked() and self.checkBox_ha.isChecked():
            self.label_pole_result.setText('Wybierz tylko jedną jednostkę.')
        else:
            if self.checkBox_m2.isChecked():
                selected_layer = self.mMapLayerComboBox.currentLayer()
                features = selected_layer.selectedFeatures()
                wsp_x = []
                wsp_y = []
                nr_pkt = []
                for feature in features:
                    geom = feature.geometry()
                    point = geom.asPoint()
                    wsp_x.append(float(point.x()))
                    wsp_y.append(float(point.y()))
                    nr_pkt.append(int(feature['nr_punktu']))
                    
                if len(wsp_x) < 3:
                    self.label_pole_result.setText("Wybierz co najmniej 3 punkty!")
                else:
                    coords = list(zip(wsp_x, wsp_y))
                        
                    n = len(coords)
                    suma = 0
                    
                    for i in range(n):
                        x1, y1 = coords[i]
                        x2, y2 = coords[(i + 1) % n]
                        suma += x1 * y2 - x2 * y1
                    
                    pole_m2 = 0.5 * abs(suma)
                    self.label_pole_result.setText(f'{round(pole_m2,3)} m² ')
                    self.label_wyb_pkt.setText(f'Wybrane punkty: {nr_pkt}')
                    
            elif self.checkBox_ary.isChecked():
                selected_layer = self.mMapLayerComboBox.currentLayer()
                features = selected_layer.selectedFeatures()
                wsp_x = []
                wsp_y = []
                nr_pkt = []
                for feature in features:
                    geom = feature.geometry()
                    point = geom.asPoint()
                    wsp_x.append(float(point.x()))
                    wsp_y.append(float(point.y()))
                    nr_pkt.append(int(feature['nr_punktu']))
                    
                if len(wsp_x) < 3:
                    self.label_pole_result.setText("Wybierz co najmniej 3 punkty!")
                else:
                    coords = list(zip(wsp_x, wsp_y))
                        
                    n = len(coords)
                    suma = 0
                    
                    for i in range(n):
                        x1, y1 = coords[i]
                        x2, y2 = coords[(i + 1) % n]
                        suma += x1 * y2 - x2 * y1
                    
                    pole_m2 = 0.5 * abs(suma)
                    pole_a = pole_m2 / 100
                    self.label_pole_result.setText(f'{round(pole_a,3)} a ')
                    self.label_wyb_pkt.setText(f'Wybrane punkty: {nr_pkt}')
                    
            elif self.checkBox_ha.isChecked():
                selected_layer = self.mMapLayerComboBox.currentLayer()
                features = selected_layer.selectedFeatures()
                wsp_x = []
                wsp_y = []
                nr_pkt = []
                for feature in features:
                    geom = feature.geometry()
                    point = geom.asPoint()
                    wsp_x.append(float(point.x()))
                    wsp_y.append(float(point.y()))
                    nr_pkt.append(int(feature['nr_punktu']))
                    
                if len(wsp_x) < 3:
                    self.label_pole_result.setText("Wybierz co najmniej 3 punkty!")
                else:
                    coords = list(zip(wsp_x, wsp_y))
                        
                    n = len(coords)
                    suma = 0
                    
                    for i in range(n):
                        x1, y1 = coords[i]
                        x2, y2 = coords[(i + 1) % n]
                        suma += x1 * y2 - x2 * y1
                    
                    pole_m2 = 0.5 * abs(suma)
                    pole_ha = pole_m2 / 10000 
                    self.label_pole_result.setText(f'{round(pole_ha,3)} ha ')
                    self.label_wyb_pkt.setText(f'Wybrane punkty: {nr_pkt}')
        
    def czysc(self):
        self.label_dh_result.clear()
        self.label_pole_result.clear()
        self.checkBox_m2.setChecked(False)
        self.checkBox_ary.setChecked(False)
        self.checkBox_ha.setChecked(False)
        self.label_wyb_pkt.clear()
        self.label_punkty_error.clear()
        self.checkBox_2000.setChecked(False)
        self.checkBox_1992.setChecked(False)
        self.checkBox_strefa_5.setChecked(False)
        self.checkBox_strefa_6.setChecked(False)
        self.checkBox_strefa_7.setChecked(False)
        self.checkBox_strefa_8.setChecked(False)
        
    
    def wstaw_punkty(self):
        file_path = self.mQgsFileWidget.filePath()
        if self.checkBox_2000.isChecked() and self.checkBox_1992.isChecked():
            self.label_punkty_error.setText('Wybierz tylko jeden układ.')
        else:
            if self.checkBox_1992.isChecked():
                x_coords = []
                y_coords = []
                with open(file_path, 'r') as file:
                    for line in file:
                        parts = line.split()
                        x = float(parts[0])
                        y = float(parts[1])
                        x_coords.append(x)
                        y_coords.append(y)
                        
                layer = QgsVectorLayer('Point?crs=EPSG:2180', 'wgrane_punkty', 'memory')
        
                coords = list(zip(x_coords, y_coords))
                n = len(coords)
                i = 0
        
                layer_provider = layer.dataProvider()
                layer_provider.addAttributes([QgsField('nr', QVariant.String), QgsField('x', QVariant.Int),QgsField('y', QVariant.Int)])
                layer.updateFields()
                for i in range(n):
                    feature = QgsFeature()
                    feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(float(x_coords[i]), float(y_coords[i]))))
                    feature.setAttributes([f'Punkt {i+1}', x_coords[i], y_coords[i]])
                    layer_provider.addFeature(feature)
            
                    layer.updateExtents()
                    i += 1
                
                QgsProject.instance().addMapLayer(layer)
                
            elif self.checkBox_2000.isChecked():
                if self.checkBox_strefa_5.isChecked() and (self.checkBox_strefa_6.isChecked() or self.checkBox_strefa_7.isChecked() or self.checkBox_strefa_8.isChecked()):
                    self.label_punkty_error.setText('Wybierz tylko jedną strefe.')
                elif self.checkBox_strefa_6.isChecked() and (self.checkBox_strefa_5.isChecked() or self.checkBox_strefa_7.isChecked() or self.checkBox_strefa_8.isChecked()):
                    self.label_punkty_error.setText('Wybierz tylko jedną strefe.')
                elif self.checkBox_strefa_7.isChecked() and (self.checkBox_strefa_5.isChecked() or self.checkBox_strefa_6.isChecked() or self.checkBox_strefa_8.isChecked()):
                    self.label_punkty_error.setText('Wybierz tylko jedną strefe.')
                elif self.checkBox_strefa_8.isChecked() and (self.checkBox_strefa_5.isChecked() or self.checkBox_strefa_6.isChecked() or self.checkBox_strefa_7.isChecked()):
                    self.label_punkty_error.setText('Wybierz tylko jedną strefe.')
                else:
                    if self.checkBox_strefa_5.isChecked():
                        x_coords = []
                        y_coords = []
                        with open(file_path, 'r') as file:
                            for line in file:
                                parts = line.split()
                                x = float(parts[0])
                                y = float(parts[1])
                                x_coords.append(x)
                                y_coords.append(y)
                                
                        layer = QgsVectorLayer('Point?crs=EPSG:2176', 'wgrane_punkty', 'memory')
                
                        coords = list(zip(x_coords, y_coords))
                        n = len(coords)
                        i = 0
                
                        layer_provider = layer.dataProvider()
                        layer_provider.addAttributes([QgsField('nr', QVariant.String), QgsField('x', QVariant.Int),QgsField('y', QVariant.Int)])
                        layer.updateFields()
                        for i in range(n):
                            feature = QgsFeature()
                            feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(float(x_coords[i]), float(y_coords[i]))))
                            feature.setAttributes([f'Punkt {i+1}', x_coords[i], y_coords[i]])
                            layer_provider.addFeature(feature)
                    
                            layer.updateExtents()
                            i += 1
                        
                        QgsProject.instance().addMapLayer(layer)
                        
                    elif self.checkBox_strefa_6.isChecked():
                        x_coords = []
                        y_coords = []
                        with open(file_path, 'r') as file:
                            for line in file:
                                parts = line.split()
                                x = float(parts[0])
                                y = float(parts[1])
                                x_coords.append(x)
                                y_coords.append(y)
                                
                        layer = QgsVectorLayer('Point?crs=EPSG:2177', 'wgrane_punkty', 'memory')
                
                        coords = list(zip(x_coords, y_coords))
                        n = len(coords)
                        i = 0
                
                        layer_provider = layer.dataProvider()
                        layer_provider.addAttributes([QgsField('nr', QVariant.String), QgsField('x', QVariant.Int),QgsField('y', QVariant.Int)])
                        layer.updateFields()
                        for i in range(n):
                            feature = QgsFeature()
                            feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(float(x_coords[i]), float(y_coords[i]))))
                            feature.setAttributes([f'Punkt {i+1}', x_coords[i], y_coords[i]])
                            layer_provider.addFeature(feature)
                    
                            layer.updateExtents()
                            i += 1
                        
                        QgsProject.instance().addMapLayer(layer)
                        
                    elif self.checkBox_strefa_7.isChecked():
                        x_coords = []
                        y_coords = []
                        with open(file_path, 'r') as file:
                            for line in file:
                                parts = line.split()
                                x = float(parts[0])
                                y = float(parts[1])
                                x_coords.append(x)
                                y_coords.append(y)
                                
                        layer = QgsVectorLayer('Point?crs=EPSG:2178', 'wgrane_punkty', 'memory')
                
                        coords = list(zip(x_coords, y_coords))
                        n = len(coords)
                        i = 0
                
                        layer_provider = layer.dataProvider()
                        layer_provider.addAttributes([QgsField('nr', QVariant.String), QgsField('x', QVariant.Int),QgsField('y', QVariant.Int)])
                        layer.updateFields()
                        for i in range(n):
                            feature = QgsFeature()
                            feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(float(x_coords[i]), float(y_coords[i]))))
                            feature.setAttributes([f'Punkt {i+1}', x_coords[i], y_coords[i]])
                            layer_provider.addFeature(feature)
                    
                            layer.updateExtents()
                            i += 1
                        
                        QgsProject.instance().addMapLayer(layer)
                        
                    elif self.checkBox_strefa_8.isChecked():
                        x_coords = []
                        y_coords = []
                        with open(file_path, 'r') as file:
                            for line in file:
                                parts = line.split()
                                x = float(parts[0])
                                y = float(parts[1])
                                x_coords.append(x)
                                y_coords.append(y)
                                
                        layer = QgsVectorLayer('Point?crs=EPSG:2179', 'wgrane_punkty', 'memory')
                
                        coords = list(zip(x_coords, y_coords))
                        n = len(coords)
                        i = 0
                
                        layer_provider = layer.dataProvider()
                        layer_provider.addAttributes([QgsField('nr', QVariant.String), QgsField('x', QVariant.Int),QgsField('y', QVariant.Int)])
                        layer.updateFields()
                        for i in range(n):
                            feature = QgsFeature()
                            feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(float(x_coords[i]), float(y_coords[i]))))
                            feature.setAttributes([f'Punkt {i+1}', x_coords[i], y_coords[i]])
                            layer_provider.addFeature(feature)
                    
                            layer.updateExtents()
                            i += 1
                        
                        QgsProject.instance().addMapLayer(layer)
                
        
        
        
    def poligon(self):
          
        selected_layer = self.mMapLayerComboBox.currentLayer()

    
        features = selected_layer.selectedFeatures()

        points = []


        for feature in features:
            geom = feature.geometry()
            point = geom.asPoint()
            points.append(point)


        polygon = QgsGeometry.fromPolygonXY([points])


        area = polygon.area()

        self.label_poligon.setText(f'Pole poligonu {area} m2')
                
        
        
        
        